import { escapeRegex } from "~/lib/escapeRegex"

// â˜ž https://www.isu.org/inside-isu/isu-communications/communications/34028-isu-communication-2656-1/file
const ABBRS = [
  "1T",
  "1S",
  "1Lo",
  "1Eu",
  "1F",
  "1Lz",
  "1Tq",
  "1Sq",
  "1Loq",
  "1Fq",
  "1Lzq",
  "1T<",
  "1S<",
  "1Lo<",
  "1F<",
  "1Lz<",
  "1T<<",
  "1S<<",
  "1Lo<<",
  "1Eu<<",
  "1F<<",
  "1Lz<<",
  "1Fe",
  "1Feq",
  "1Fe<",
  "1Fe<<",
  "1Lze",
  "1Lzeq",
  "1Lze<",
  "1Lze<<",
  "1F!",
  "1F!q",
  "1F!<",
  "1F!<<",
  "1Lz!",
  "1Lz!q",
  "1Lz!<",
  "1Lz!<<",
  "1A",
  "2T",
  "2S",
  "2Lo",
  "2F",
  "2Lz",
  "1Aq",
  "2Tq",
  "2Sq",
  "2Loq",
  "2Fq",
  "2Lzq",
  "1A<",
  "2T<",
  "2S<",
  "2Lo<",
  "2F<",
  "2Lz<",
  "1A<<",
  "2T<<",
  "2S<<",
  "2Lo<<",
  "2F<<",
  "2Lz<<",
  "2Fe",
  "2Feq",
  "2Fe<",
  "2Fe<<",
  "2Lze",
  "2Lzeq",
  "2Lze<",
  "2Lze<<",
  "2F!",
  "2F!q",
  "2F!<",
  "2F!<<",
  "2Lz!",
  "2Lz!q",
  "2Lz!<",
  "2Lz!<<",
  "2A",
  "3T",
  "3S",
  "3Lo",
  "3F",
  "3Lz",
  "2Ab",
  "3Tb",
  "3Sb",
  "3Lob",
  "3Fb",
  "3Lzb",
  "2Aq",
  "3Tq",
  "3Sq",
  "3Loq",
  "3Fq",
  "3Lzq",
  "2Aqb",
  "3Tqb",
  "3Sqb",
  "3Loqb",
  "3Fqb",
  "3Lzqb",
  "2A<",
  "3T<",
  "3S<",
  "3Lo<",
  "3F<",
  "3Lz<",
  "2A<<",
  "3T<<",
  "3S<<",
  "3Lo<<",
  "3F<<",
  "3Lz<<",
  "3Fe",
  "3Feq",
  "3Fe<",
  "3Fe<<",
  "3Lze",
  "3Lzeq",
  "3Lze<",
  "3Lze<<",
  "3F!",
  "3F!b",
  "3F!q",
  "3F!qb",
  "3F!<",
  "3F!<<",
  "3Lz!",
  "3Lz!b",
  "3Lz!q",
  "3Lz!qb",
  "3Lz!<",
  "3Lz!<<",
  "3A",
  "3Ab",
  "4T",
  "4S",
  "4Lo",
  "4F",
  "4Lz",
  "4A",
  "3Aq",
  "3Aqb",
  "4Tq",
  "4Sq",
  "4Loq",
  "4Fq",
  "4Lzq",
  "4Aq",
  "3A<",
  "4T<",
  "4S<",
  "4Lo<",
  "4F<",
  "4Lz<",
  "3A<<",
  "4T<<",
  "4S<<",
  "4Lo<<",
  "4F<<",
  "4Lz<<",
  "4Fe",
  "4Feq",
  "4Fe<",
  "4Fe<<",
  "4Lze",
  "4Lzeq",
  "4Lze<",
  "4Lze<<",
  "4F!",
  "4F!q",
  "4F!<",
  "4F!<<",
  "4Lz!",
  "4Lz!q",
  "4Lz!<",
  "4Lz!<<",
  "4A<",
  "4A<<",
]

const PATTERN_JUMP =
  "(" +
  "(" +
  ABBRS.map((abbr) => escapeRegex(abbr)).join("|") +
  ")" +
  "[*]?" + // * ... Invalid element
  ")"

// Solo jump
const PATTERN_SOLO_JUMP = PATTERN_JUMP

// Repeated jump
const PATTERN_REPEATED_JUMP = "(" + `${PATTERN_JUMP}[+]REP` + ")"

// Jump combination
const PATTERN_JUMP_COMBINATION =
  "(" +
  `${PATTERN_JUMP}([+]${PATTERN_JUMP}){1,2}` +
  "|" +
  `${PATTERN_JUMP}[+]COMBO` +
  ")"

// Jump sequence
const PATTERN_JUMP_SEQUENCE =
  "(" + `${PATTERN_JUMP}([+]${PATTERN_JUMP}){1,2}[+]SEQ` + ")"

const PATTERN_JUMP_ELEMENT =
  "(" +
  [
    PATTERN_SOLO_JUMP,
    PATTERN_REPEATED_JUMP,
    PATTERN_JUMP_COMBINATION,
    PATTERN_JUMP_SEQUENCE,
  ].join("|") +
  ")"

const REGEX_JUMP_ELEMENT = new RegExp("^" + PATTERN_JUMP_ELEMENT + "$")

export const isJumpElement = (abbr: string): boolean => {
  return REGEX_JUMP_ELEMENT.test(abbr)
}
